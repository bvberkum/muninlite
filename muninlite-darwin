#!/bin/sh
# 
# Simple Bourne Shell script that implements Munin protocoll and 
# some common Linux plugins.
#
# For latest version, see http://muninlite.sf.net/
#
# Copyright (c) 2007-2011 Rune Nordbøe Skillingstad <rune@skillingstad.no>
# 
# Licensed under GPLv2 (see LICENSE file for full License)
#
# @mpe converting script to Darwin iso. building munin node
#

VERSION="1.0.4"

NTP_PEER="pool.ntp.org";

# if plugindir_ is present in $PLUGINS,
# iexecutables (scripts, binaries) matching the following pattern will be scanned and operated as plugins
PLUGINPATTERN=$(dirname $0)"/munin-node-plugin.d/*"

# Remove unwanted plugins from this list
PLUGINS="df df_inode cpu load memory uptime users"
# df cpu if_ if_err_ load memory processes swap netstat uptime interrupts irqstats ntpdate plugindir_"
# ===== LIB FUNCTIONS =====
clean_fieldname() {
  echo "$@" | sed -e 's/^[^A-Za-z_]/_/' -e 's/[^A-Za-z0-9_]/_/g'
}

# ===== PLUGINS CODE =====

config_df() {
  echo "graph_title Filesystem usage (in %)
graph_args --upper-limit 100 -l 0
graph_vlabel %
graph_category disk
graph_info This graph shows disk usage on the machine."
  df -P | grep '^/' | awk '{print $6}' | while read PART
  do
    PINFO=$(df -P $PART | tail -1);
    PNAME=$(echo $PINFO | cut -d\  -f1 | sed 's/\//_/g')
    echo "$PNAME.label $PART"
    echo "$PNAME.info $PNAME -> $PART"
    echo "$PNAME.warning 92"
    echo "$PNAME.critical 98"
  done
}
fetch_df() {
  df -P | grep '^/' | awk '{print $6}' | while read PART
  do
    PINFO=$(df -P $PART | tail -1);
    PNAME=$(echo $PINFO | cut -d\  -f1 | sed 's/[\/.-]/_/g')
    echo "$PNAME.value" $(echo $PINFO | cut -f5 -d\  | sed -e 's/\%//g')
  done
}

config_df_inode() {
  echo "graph_title Filesystem inode usage
graph_args --logarithmic
graph_vlabel inodes
graph_category disk
graph_info This graph shows fs inode usage"
  df -P | grep '^/' | awk '{print $6}' | while read PART
  do
    PINFO=$(df -Pi $PART | tail -1);
    PNAME=$(echo $PINFO | cut -d\  -f1 | sed 's/\//_/g')
    echo "$PNAME.label $PART"
    echo "$PNAME.info $PNAME -> $PART"
    echo "${PNAME}_free.label $PART (free)"
    echo "${PNAME}_free.info ${PNAME}_free -> $PART (free)"
    echo "${PNAME}_max.label $PART (max)"
    echo "${PNAME}_max.info ${PNAME}_max -> $PART (max)"
  done
}
fetch_df_inode() {
  df -P | grep '^/' | awk '{print $6}' | while read PART
  do
    PINFO=$(df -Pi $PART | tail -1);
    PNAME=$(echo $PINFO | cut -d\  -f1 | sed 's/[\/.-]/_/g')
    used=$(echo $PINFO | cut -f6 -d\  )
    free=$(echo $PINFO | cut -f7 -d\  )
    echo "$PNAME.value" $used
    echo "${PNAME}_free.value" $free
    echo "${PNAME}_max.value" $(( $used + $free ))
  done
}

# http://serverfault.com/questions/14981/getting-cpu-information-from-command-line-in-mac-os-x-server
config_cpu() {
  echo "graph_title CPU usage"
  echo "graph_order system user nice idle"
  echo "graph_args --base 1000 -r --lower-limit 0 --upper-limit 100"
  echo "graph_vlabel %"
  echo "graph_scale no"
  echo "graph_info This graph shows how CPU time is spent."
  echo "graph_category system"
  echo "graph_period second"
  echo "system.label system"
  echo "system.draw AREA"
  echo "system.max 100"
  echo "system.min 0"
  echo "system.type GAUGE"
  echo "system.warning 30"
  echo "system.critical 50"
  echo "system.info CPU time spent by the kernel in system activities"
  echo "user.label user"
  echo "user.draw STACK"
  echo "user.min 0"
  echo "user.max 100"
  echo "user.warning 80"
  echo "user.type GAUGE"
  echo "user.info CPU time spent by normal programs and daemons"
  echo "nice.label nice"
  echo "nice.draw STACK"
  echo "nice.min 0"
  echo "nice.max 100"
  echo "nice.warning 80"
  echo "nice.type GAUGE"
  echo "idle.label idle"
  echo "idle.draw STACK"
  echo "idle.min 0"
  echo "idle.max 100"
  echo "idle.type GAUGE"
  echo "idle.info Idle CPU time"
}
fetch_cpu() {
  echo $(top -l1 -n0 -u|grep CPU.usage|sed 's/[a-zA-Z%,\:]//g') | while read user sys idle
  do
  echo "user.value" $user
  echo "system.value" $sys
  echo "nice.value" 0
  echo "idle.value" $idle
  done
}

config_if() {
  echo "graph_order down up"
  echo "graph_title $1 traffic"
  echo "graph_args --base 1000"
  echo "graph_vlabel bits in (-) / out (+) per \${graph_period}"
  echo "graph_category network"
  echo "graph_info This graph shows the traffic of the $INTERFACE network interface. Please note that the traffic is shown in bits per second, not bytes. IMPORTANT: Since the data source for this plugin use 32bit counters, this plugin is really unreliable and unsuitable for most 100Mb (or faster) interfaces, where bursts are expected to exceed 50Mbps. This means that this plugin is usuitable for most production environments. To avoid this problem, use the ip_ plugin instead."
  echo "down.label received"
  echo "down.type DERIVE"
  echo "down.min 0"
  echo "down.graph no"
  echo "down.cdef down,8,*"
  echo "up.label bps"
  echo "up.type DERIVE"
  echo "up.min 0"
  echo "up.negative down"
  echo "up.cdef up,8,*"
  if ethtool $1 | grep -q Speed; then
    MAX=$(($(ethtool $1 | grep Speed | sed -e 's/[[:space:]]\{1,\}/ /g' -e 's/^ //' -e 's/M.*//' | cut -d\  -f2) * 1000000))
    echo "up.max $MAX"
    echo "down.max $MAX"
  fi
}
fetch_if() {
  IINFO=$(grep "$1:" /proc/net/dev | cut -d: -f2 | sed -e 's/  / /g')
  echo "down.value" $(echo $IINFO | cut -d\  -f1)
  echo "up.value" $(echo $IINFO | cut -d\  -f9)
}
config_if_err() {
  echo "graph_order rcvd trans"
  echo "graph_title $1 errors"
  echo "graph_args --base 1000"
  echo "graph_vlabel packets in (-) / out (+) per \${graph_period}"
  echo "graph_category network"
  echo "graph_info This graph shows the amount of errors on the $1 network interface."
  echo "rcvd.label packets"
  echo "rcvd.type COUNTER"
  echo "rcvd.graph no"
  echo "rcvd.warning 1"
  echo "trans.label packets"
  echo "trans.type COUNTER"
  echo "trans.negative rcvd"
  echo "trans.warning 1"
}
fetch_if_err() {
  IINFO=$(grep "$1:" /proc/net/dev | cut -d: -f2 | sed -e 's/  / /g')
  echo "rcvd.value" $(echo $IINFO | cut -d\  -f3)
  echo "trans.value" $(echo $IINFO | cut -d\  -f11)
}

config_load() {
  echo "graph_title Load average
graph_args --base 1000 -l 0
graph_vlabel load
graph_scale no
graph_category system
load.label load
load.warning 10
load.critical 120
graph_info The load average of the machine describes how many processes are in the run-queue (scheduled to run \"immediately\").
load.info Average load for the five minutes."
}
fetch_load() {
  printf "load.value "
  uptime | sed 's/^.*load.averages. //g' | cut -f 1 -d ' '
}

# http://superuser.com/questions/197059/mac-os-x-sysctl-get-total-and-free-memory-size
# https://github.com/munin-monitoring/contrib/blob/master/plugins/system/dar_memusage
config_memory() {
	memline=$(hostinfo | grep memory | sed -e 's/^.*://' | awk '{ if ($2 == "gigabytes") print $1 * 1024 * 1024 * 1024 }')
	echo "graph_title Memory usage"
	echo "graph_args --base 1024 --lower-limit 0 --upper-limit $memline --rigid";
	echo "graph_vlabel Bytes"
	echo "graph_scale yes"
	echo "graph_category system"
	echo "wired.label wired\nwired.type GAUGE\nwired.draw AREA"
	echo "active.label active\nactive.type GAUGE\nactive.draw STACK"
	echo "inactive.label inactive\ninactive.type GAUGE\ninactive.draw STACK"
	echo "free.label free\nfree.type GAUGE\nfree.draw STACK"
	echo "used.label used\nused.type GAUGE\nused.draw LINE2"
}
fetch_memory() {
	OLD_IFS=$IFS
	IFS=$','
	top -l1 -n0 -u | grep PhysMem | sed 's/[^0-9,]//g' | while read wired active inactive used free
	do
		echo "wired.value "$(( $wired * 1024 * 1024 ))
		echo "active.value "$(( $active * 1024 * 1024 ))
		test -z "$inactive" || echo "inactive.value "$(( $inactive * 1024 * 1024 ))
		test -z "$free" || echo "free.value "$(( $free * 1024 * 1024 ))
		test -z "$used" || echo "used.value "$(( $used  * 1024 * 1024 ))
	done
	IFS=$OLD_IFS
}
config_processes() {
  echo "graph_title Number of Processes"
  echo "graph_args --base 1000 -l 0 "
  echo "graph_vlabel number of processes"
  echo "graph_category processes"
  echo "graph_info This graph shows the number of processes in the system."
  echo "processes.label processes"
  echo "processes.draw LINE2"
  echo "processes.info The current number of processes."
}
fetch_processes() {
  echo "processes.value" $(echo /proc/[0-9]* | wc -w)
}
config_swap() {
  echo "graph_title Swap in/out"
  echo "graph_args -l 0 --base 1000"
  echo "graph_vlabel pages per \${graph_period} in (-) / out (+)"
  echo "graph_category system"
  echo "swap_in.label swap"
  echo "swap_in.type DERIVE"
  echo "swap_in.max 100000"
  echo "swap_in.min 0"
  echo "swap_in.graph no"
  echo "swap_out.label swap"
  echo "swap_out.type DERIVE"
  echo "swap_out.max 100000"
  echo "swap_out.min 0"
  echo "swap_out.negative swap_in"
}
fetch_swap() {
  if [ -f /proc/vmstat ]; then
    SINFO=$(cat /proc/vmstat)
    echo "swap_in.value" $(echo "$SINFO" | grep "^pswpin" | cut -d\  -f2)
    echo "swap_out.value" $(echo "$SINFO" | grep "^pswpout" | cut -d\  -f2)
  else
    SINFO=$(grep "^swap" /proc/stat)
    echo "swap_in.value" $(echo "$SINFO" | cut -d\  -f2)
    echo "swap_out.value" $(echo "$SINFO" | cut -d\  -f3)
  fi
}
config_netstat() {
  echo "graph_title Netstat"
  echo "graph_args -l 0 --base 1000"
  echo "graph_vlabel active connections"
  echo "graph_category network"
  echo "graph_period second"
  echo "graph_info This graph shows the TCP activity of all the network interfaces combined."
  echo "active.label active"
  echo "active.type DERIVE"
  echo "active.max 50000"
  echo "active.min 0"
  echo "active.info The number of active TCP openings per second."
  echo "passive.label passive"
  echo "passive.type DERIVE"
  echo "passive.max 50000"
  echo "passive.min 0"
  echo "passive.info The number of passive TCP openings per second."
  echo "failed.label failed"
  echo "failed.type DERIVE"
  echo "failed.max 50000"
  echo "failed.min 0"
  echo "failed.info The number of failed TCP connection attempts per second."
  echo "resets.label resets"
  echo "resets.type DERIVE"
  echo "resets.max 50000"
  echo "resets.min 0"
  echo "resets.info The number of TCP connection resets."
  echo "established.label established"
  echo "established.type GAUGE"
  echo "established.max 50000"
  echo "established.info The number of currently open connections."
}
fetch_netstat() {
  NINFO=$(netstat -s | sed 's/ \{1,\}/ /g')
  echo "active.value" $(echo "$NINFO" | grep "active connections" | cut -d\  -f2)
  echo "passive.value" $(echo "$NINFO" | grep "passive connection" | cut -d\  -f2)
  echo "failed.value" $(echo "$NINFO" | grep "failed connection" | cut -d\  -f2)
  echo "resets.value" $(echo "$NINFO" | grep "connection resets" | cut -d\  -f2)
  echo "established.value" $(echo "$NINFO" | grep "connections established" | cut -d\  -f2)
}
config_uptime() {
  echo "graph_title Uptime"
  echo "graph_args --base 1000 -l 0 "
  echo "graph_vlabel uptime in days"
  echo "graph_category system"
  echo "uptime.label uptime"
  echo "uptime.draw AREA"
#  echo "uptime.cdef uptime,86400,/"
}
test_uptime() {
  boottime=$(/usr/sbin/sysctl kern.boottime | sed -e 's/.*sec = \([0-9].*\)\,.*/\1/')
  time=$(date +%s)
  echo $boottime $time $(( $time - $boottime ))
  echo $time $boottime | awk '{ days = ( $1 - $2 ) / 86400 ; print days }'
}
fetch_uptime() {
  boottime=$(/usr/sbin/sysctl kern.boottime | sed -e 's/.*sec = \([0-9].*\)\,.*/\1/')
  time=$(date +%s)
  printf "uptime.value "
  echo $time $boottime | awk '{ days = ( $1 - $2 ) / 86400 ; print days }'
}
config_interrupts() {
  echo "graph_title Interrupts & context switches"
  echo "graph_args --base 1000 -l 0"
  echo "graph_vlabel interrupts & ctx switches / \${graph_period}"
  echo "graph_category system"
  echo "graph_info This graph shows the number of interrupts and context switches on the system. These are typically high on a busy system."
  echo "intr.info Interrupts are events that alter sequence of instructions executed by a processor. They can come from either hardware (exceptions, NMI, IRQ) or software."
  echo "ctx.info A context switch occurs when a multitasking operatings system suspends the currently running process, and starts executing another."
  echo "intr.label interrupts"
  echo "ctx.label context switches"
  echo "intr.type DERIVE"
  echo "ctx.type DERIVE"
  echo "intr.max 100000"
  echo "ctx.max 100000"
  echo "intr.min 0"
  echo "ctx.min 0"
}
fetch_interrupts() {
  IINFO=$(cat /proc/stat)
  echo "ctx.value" $(echo "$IINFO" | grep "^ctxt" | cut -d\  -f2)
  echo "intr.value" $(echo "$IINFO" | grep "^intr" | cut -d\  -f2)
}
config_irqstats() {
  echo "graph_title Individual interrupts
graph_args --base 1000 -l 0;
graph_vlabel interrupts / \${graph_period}
graph_category system"
  CPUS=$(grep 'CPU[0-9]' /proc/interrupts | wc -w)
  IINFO=$(sed -e 's/ \{1,\}/ /g' -e 's/^ //' /proc/interrupts  | grep '.:')
  for ID in $(echo "$IINFO" | cut -d: -f1)
  do
    IDL=$(echo "$IINFO" | grep "^$ID:")
    INFO=$(eval "echo \"$IDL\" | cut -d\  -f$((3+$CPUS))-")
    if [ "$INFO" = "" ]; then
      echo "i$ID.label $ID"
    else
      echo "i$ID.label $INFO"
      echo "i$ID.info Interrupt $ID, for device(s): $INFO"
    fi
    echo "i$ID.type DERIVE"
    echo "i$ID.min 0"
  done
}
fetch_irqstats() {
  CPUS=$(grep 'CPU[0-9]' /proc/interrupts | wc -w)
  IINFO=$(sed -e 's/ \{1,\}/ /g' -e 's/^ //' /proc/interrupts  | grep '.:')
  for ID in $(echo "$IINFO" | cut -d: -f1)
  do
    IDL=$(echo "$IINFO" | grep "^$ID:")
    VALS=$(eval "echo \"$IDL\" | cut -d\  -f2-$((1+$CPUS))")
    VALUE=0
    for VAL in $VALS;
    do
      VALUE=$(($VALUE + $VAL))
    done
    echo "i$ID.value $VALUE"
  done
}
config_ntpdate() {
  echo "graph_title NTP offset and dealy to peer $NTP_PEER"
  echo "graph_args --base 1000 --vertical-label msec"
  echo "offset.label Offset"
  echo "offset.draw LINE2"
  echo "delay.label Delay"
  echo "delay.draw LINE2"
}

fetch_ntpdate() {
  NTPDATE="/usr/sbin/ntpdate"
  OFFSET=0
  DELAY=0
  if [ "$NTP_PEER" != "" ]; then 
    if [ -x "$NTPDATE" ]; then 
      DATA=$($NTPDATE -q $NTP_PEER | awk '/^server.*offset/{gsub(/,/,"");printf "%s %s", ($6*1000), ($8*1000);}')
      echo DATA=$DATA
      OFFSET=$(echo "$DATA" | cut -d\  -f1)
      DELAY=$(echo "$DATA" | cut -d\  -f2)
    fi
  fi
  echo "offset.value $OFFSET"
  echo "delay.value $DELAY"
}

config_users() {
	echo "graph_title Logged in users";
	echo "graph_args --base 1000 -l 0";
	echo "graph_vlabel Users";
	echo "graph_scale no";
	echo "graph_category system";
	echo "graph_printf %3.0lf";
	echo "tty.label tty";
	echo "tty.draw AREASTACK";
	echo "tty.colour 00FF00";
	echo "pty.label pty";
	echo "pty.draw AREASTACK";
	echo "pty.colour 0000FF";
	echo "pts.label pts";
	echo "pts.draw AREASTACK";
	echo "pts.colour 00FFFF";
	echo "X.label X displays";
	echo "X.draw AREASTACK";
	echo "X.info Users logged in on an X display";
	echo "X.colour 000000";
	echo "other.label Other users";
	echo "other.info Users logged in by indeterminate method";
	echo "other.colour FF0000";
}
fetch_users() {
	# XX not sure if pty/pts makes much sense for macosx
	cnt=$(echo $(who | wc -l))
	pty=0
	pts=0
	tty=$(echo $(who | grep -e '\ ttys[0-9][0-9][0-9]\ ' | wc -l))
	x=0
	other=$(( $cnt - $tty ))
	echo "tty.value $tty";
	echo "pty.value $pty";
	echo "pts.value $pts";
	echo "X.value $x";
	echo "other.value $other";
}

# ===== NODE CODE =====
do_list() {
  echo $PLUGINS
}


do_nodes() {
  echo "$HOSTNAME"
  echo "."
}

do_config() {
  if echo "$PLUGINS" | grep "\b$1\b" >/dev/null 2>&1; then
    config_$1
  else
    echo "# Unknown service"
  fi
  echo "."
}

do_test() {
  if echo "$PLUGINS" | grep "\b$1\b" >/dev/null 2>&1; then
    test_$1
  else
    echo "# Unknown service"
  fi
  echo "."
}

do_fetch() {
  if echo "$PLUGINS" | grep "\b$1\b" >/dev/null 2>&1; then
    fetch_$1
  else
    echo "# Unknown service"
  fi
  echo "."
}

do_version() {
  echo "munins node on $HOSTNAME version: $VERSION (munin-lite)"
}

do_quit() {
  exit 0
}

# ===== Runtime config =====
RES=""
for PLUG in $PLUGINS
do 
  if [ "$PLUG" = "if_" ]; then  
    for INTER in $(grep '^ *\(ppp\|eth\|wlan\|ath\|ra\|ipsec\)\([^:]\)\{1,\}:' /proc/net/dev | cut -f1 -d: | sed 's/ //g');
    do
      INTERRES=$(echo $INTER | sed 's/\./VLAN/')
      RES="$RES if_$INTERRES"
      eval "fetch_if_${INTERRES}() { fetch_if $INTER $@; };"
      eval "config_if_${INTERRES}() { config_if $INTER $@; };"
    done
  elif [ "$PLUG" = "if_err_" ]; then
    for INTER in $(grep '^ *\(ppp\|eth\|wlan\|ath\|ra\|ipsec\)\([^:]\)\{1,\}:' /proc/net/dev | cut -f1 -d: | sed 's/ //g');
    do
      INTERRES=$(echo $INTER | sed 's/\./VLAN/')
      RES="$RES if_err_$INTERRES"
      eval "fetch_if_err_${INTERRES}() { fetch_if_err $INTER $@; };"
      eval "config_if_err_${INTERRES}() { config_if_err $INTER $@; };"
    done
  elif [ "$PLUG" = "netstat" ]; then
    if netstat -s >/dev/null 2>&1; then
      RES="$RES netstat"
    fi
  elif [ "$PLUG" = "plugindir_" ]; then
    for MYPLUGIN in $(ls -1 $PLUGINPATTERN 2>/dev/null );
    do
      if [ -f $MYPLUGIN -a -x $MYPLUGIN ]; then
        MYPLUGINNAME=$(basename $MYPLUGIN)
        #ensure we don't have name collision
        if echo "$RES" | grep "\b$MYPLUGINNAME\b" >/dev/null 2>&1 ; then
          MYPLUGINNAME="plugindir_$MYPLUGINNAME"
        fi
        RES="$RES $MYPLUGINNAME"
        eval "fetch_${MYPLUGINNAME}() { $MYPLUGIN ; };"
        eval "config_${MYPLUGINNAME}() { $MYPLUGIN config ; };"
      fi
    done
  else
    RES="$RES $PLUG";
  fi
done
PLUGINS=$(echo $RES)

# ===== MAIN LOOP =====
FUNCTIONS="list nodes config fetch test version quit"
HOSTNAME=$(hostname -f 2>/dev/null || hostname)
echo "# munin node at $HOSTNAME"
IFS=$'\r '
while read arg0 arg1
do
  arg0=$(echo "$arg0" | xargs)
  [ -z "$arg0" ] && continue;
  arg1=$(echo "$arg1" | xargs)
  if ! echo "$FUNCTIONS" | grep "\b$arg0\b" >/dev/null 2>&1 ; then
    echo "# Unknown command. Try" $(echo "$FUNCTIONS" | sed -e 's/\( [[:alpha:]]\{1,\}\)/,\1/g' -e 's/,\( [[:alpha:]]\{1,\}\)$/ or\1/')
    continue
  fi
  
  do_$arg0 $arg1
done 

